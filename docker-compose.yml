services:
  sanabaweb:
    build:
      context: .
      dockerfile: Dockerfile
    # Pas de ports exposés : Traefik route depuis le réseau "proxy"
    volumes:
      - .:/sanaba-app/
      # On garde les dossiers statiques/médias dans le même préfixe pour la cohérence
      - static_volume:/sanaba-app/static
      - media_volume:/sanaba-app/media
    env_file:
      - ./.env
    restart: always
    depends_on:
      sanabaDB:
        condition: service_healthy
    healthcheck:
      # Assure-toi que l'image contient curl (sinon remplace par wget --spider ou python -c)
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8000/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
    networks:
      - default
      - proxy
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy

      # Routers (HTTP -> redir HTTPS)
      - traefik.http.routers.sanabaweb-http.rule=Host(`sanaba.co.uk`,`www.sanaba.co.uk`)
      - traefik.http.routers.sanabaweb-http.entrypoints=web
      - traefik.http.routers.sanabaweb-http.middlewares=redirect-to-https@docker

      # Router HTTPS
      - traefik.http.routers.sanabaweb.rule=Host(`sanaba.co.uk`,`www.sanaba.co.uk`)
      - traefik.http.routers.sanabaweb.entrypoints=websecure
      - traefik.http.routers.sanabaweb.tls=true
      - traefik.http.routers.sanabaweb.tls.certresolver=lets

      # Middlewares (chaînez les vôtres si définis côté Traefik)
      - traefik.http.routers.sanabaweb.middlewares=sec-headers@docker,compress@docker,ratelimit@docker

      # Service: port interne Gunicorn/Uvicorn
      - traefik.http.services.sanabaweb.loadbalancer.server.port=8000

      # Middleware de redirection HTTP -> HTTPS (défini ici côté Docker)
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      - traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true

  sanabaDB:
    image: postgis/postgis:16-3.4
    # ⚠️ Si ton hôte est ARM64 (ex: Graviton), retire cette ligne
    platform: linux/amd64
    restart: always
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      # Utilise les mêmes variables que ta config réelle
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME} -h 127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - default

networks:
  # Réseau interne app <-> DB
  default:
    name: sanaba_default
  # Réseau Traefik (déjà créé par le stack Traefik)
  proxy:
    external: true

volumes:
  pgdata:
    driver: local
  static_volume:
  media_volume: